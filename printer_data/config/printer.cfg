[include mainsail.cfg]
# This file contains pin mappings for the stock 2022 Creality Ender 3
# S1 Plus. To use this config check the STM32 Chip on the Mainboard,
# during "make menuconfig" select accordingly either the
# STM32F103 with "28KiB bootloader" or the STM32F401 with
# "64KiB bootloader" and serial (on USART1 PA10/PA9) for both.

# For a direct serial connection, in "make menuconfig" select
# "Enable extra low-level configuration options" and  Serial
# (on USART2 PA3/PA2), which is on the 10 pin IDC cable used
# for the LCD module as follows: 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The filename
# must be changed to "firmware.bin"

# With STM32F401, you might need to put "firmware.bin" in a
# folder on the SD card called "STM32F4_UPDATE" in order to flash.

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA5
position_endstop: -2
position_max: 329
position_min: -2
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_endstop: -4
position_max: 310
position_min: -4
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 250
position_min: -4

[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
max_extrude_only_distance: 100.0
#control: pid
#pid_Kp: 23.561
#pid_Ki: 1.208
#pid_Kd: 114.859
min_temp: 0
max_temp: 280
pressure_advance: 0.044

[heater_bed]
heater_pin: PA7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
#pid_Kp: 71.867
#pid_Ki: 1.536
#pid_Kd: 840.843
min_temp: 0
max_temp: 110

[heater_fan hotend_fan]
pin: PC0
fan_speed: 0.6

# Fan is always on because I fried the board, but we leave it in place as it caused M106 errors
[fan]
pin: PA0

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[bltouch]
sensor_pin: ^PC14
control_pin: PC13
x_offset: -48
y_offset: 0
#z_offset: 0
speed:5
samples:1
samples_result:average
probe_with_touch_mode: true
stow_on_each_sample: false

[bed_mesh]
speed: 100
mesh_min: 27, 27
mesh_max: 281, 283
algorithm: bicubic
bicubic_tension: 0.2
probe_count: 7,7
fade_start: 1
fade_end: 8
fade_target: 0
mesh_pps: 2,2

[screws_tilt_adjust]
screw1: 84, 34
screw1_name: front left screw
screw2: 322, 34
screw2_name: front right screw
screw3: 322, 274
screw3_name: rear right screw
screw4: 84, 274
screw4_name: rear left screw
horizontal_move_z: 6.0
speed: 50
screw_thread: CW-M4 # Use CW for Clowise and CCW for Counter Clockwise

[bed_screws]
screw1: 32, 268
screw2: 32, 33
screw3: 267, 33
screw4: 270, 268

[exclude_object]

[temperature_sensor Raspberry_Pi]
sensor_type: temperature_host
min_temp: 0
max_temp: 100

[virtual_sdcard]
path: ~/printer_data/gcodes

[display_status]

[safe_z_home]
home_xy_position: 215, 166
speed: 75
z_hop: 10
z_hop_speed: 5

[filament_switch_sensor RunoutSensor]
pause_on_runout: True
runout_gcode: PAUSE
insert_gcode: RESUME
switch_pin: !PC15

[pause_resume]
recover_velocity: 25

[gcode_macro M600]
########### Gcode ############
gcode:
  M117 Filament change
  PAUSE
  M117 Remove filament
  G0 E5 F500 ;extrude filament to get better blob on end
  G0 E-50 F600 ;retract additional filament to move out of melt zone

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=RunoutSensor ENABLE=0                                     ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X-1.5 Y-4 F6000                                                                   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        # M104 S0                                                                            ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=3600                                                        ; set timeout to 1 hou
    {% endif %}
    M117 Paused

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    M117 Resuming
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=RunoutSensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        M117 Printing
    {% endif %}


# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - 2.0) %}
#       {% set z_safe = 2.0 %}
#   {% else %}
#       {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   PAUSE_BASE
#   G91
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G1 E-{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}
#   SET_IDLE_TIMEOUT TIMEOUT=900

# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   G0 E30 F500
#   RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  # UPDATE_DELAYED_GCODE ID=power-off-printer DURATION=10

[gcode_macro START_PRINT]
gcode:
  {action_call_remote_method("set_device_power", device="printer-light", state="on")}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # Start bed heating (but don't wait for it)
  M140 S{BED_TEMP}
  # Use absolute coordinates
  G90
  # Home the printer
  G28
  M190 S{BED_TEMP}
  BED_MESH_CALIBRATE ADAPTIVE=1
  # BED_MESH_PROFILE LOAD="default"
  # Move the nozzle near the bed
  G1 X5.1 Y20 Z5 F3000
  # Move the nozzle very close to the bed
  G1 Z0.15 F300
  # Wait for bed to reach temperature
  
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}

  M117 Purging Nozzle...
  G92 E0; Reset extruder
  
  G1 X5.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
  G1 X5.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
  G1 X5.4 Y20 Z0.28 F1500.0 E30 ;Draw the second line
  G1 X10 Y20 Z0.1 F5000.0
  G1 X-2 Z0
  G1 X10 Z2.0
  G92 E0 ;Reset Extruder
  G1 Z2.0 F3000 ;Move Z Axis up

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro SCREW_TILT_ADJUST]
gcode:
  G28
  SCREWS_TILT_CALCULATE

[gcode_macro MANUAL_SCREW_ADJUST]
description: Manually set screws through paper method
gcode:
  G28
  BED_SCREWS_ADJUST

[gcode_macro END_PRINT]
gcode:
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Relative positionning
  G91
  # Retract and raise Z
  G1 X0 Z0.2 E-2 F2400
  # Wipe out
  # G1 X5 Y5 F3000
  # Raise Z more
  G1 Z10
  # Absolute positionning
  G90
  # Present print
  G1 X0 
  # # Disable steppers
  # M84
  # # Print message on LCD
  # M117 That's All Folks
  UPDATE_DELAYED_GCODE ID=power-off-printer DURATION=10

[delayed_gcode power-off-printer]
gcode:
  {action_call_remote_method("set_device_power", device="printer-plug", state="off")}
  {action_call_remote_method("set_device_power", device="printer-light", state="off")}

[gcode_macro POWER_OFF_PRINTER]
gcode:
  UPDATE_DELAYED_GCODE ID=power-off-printer DURATION=10

[include timelapse.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 3.185
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.297
#*# pid_ki = 2.104
#*# pid_kd = 70.157
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 76.566
#*# pid_ki = 0.961
#*# pid_kd = 1524.613
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.105000, 0.075000, 0.127500, 0.185000, 0.210000, 0.295000, 0.210000
#*# 	-0.157500, -0.025000, -0.022500, -0.030000, -0.052500, -0.115000, -0.172500
#*# 	-0.147500, 0.002500, 0.005000, 0.005000, -0.025000, -0.105000, -0.215000
#*# 	-0.245000, -0.075000, -0.020000, -0.022500, -0.022500, -0.077500, -0.152500
#*# 	-0.322500, -0.107500, -0.060000, -0.010000, 0.005000, -0.020000, -0.087500
#*# 	-0.350000, -0.207500, -0.162500, -0.120000, -0.107500, -0.160000, -0.222500
#*# 	-0.095000, 0.020000, 0.015000, 0.025000, -0.010000, -0.090000, -0.180000
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 9.999999999999996
#*# max_x = 283.96
#*# min_y = 10.0
#*# max_y = 263.98